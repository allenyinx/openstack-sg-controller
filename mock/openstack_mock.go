// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/openstack/openstack.go

// Package mock_openstack is a generated GoMock package.
package mock_openstack

import (
	gomock "github.com/golang/mock/gomock"
	tenants "github.com/gophercloud/gophercloud/openstack/identity/v2/tenants"
	projects "github.com/gophercloud/gophercloud/openstack/identity/v3/projects"
	groups "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/security/groups"
	rules "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/security/rules"
	reflect "reflect"
)

// MockOpenStackClientInterface is a mock of OpenStackClientInterface interface
type MockOpenStackClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStackClientInterfaceMockRecorder
}

// MockOpenStackClientInterfaceMockRecorder is the mock recorder for MockOpenStackClientInterface
type MockOpenStackClientInterfaceMockRecorder struct {
	mock *MockOpenStackClientInterface
}

// NewMockOpenStackClientInterface creates a new mock instance
func NewMockOpenStackClientInterface(ctrl *gomock.Controller) *MockOpenStackClientInterface {
	mock := &MockOpenStackClientInterface{ctrl: ctrl}
	mock.recorder = &MockOpenStackClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenStackClientInterface) EXPECT() *MockOpenStackClientInterfaceMockRecorder {
	return m.recorder
}

// CreateSecurityGroup mocks base method
func (m *MockOpenStackClientInterface) CreateSecurityGroup(name, description, tenantID string) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", name, description, tenantID)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup
func (mr *MockOpenStackClientInterfaceMockRecorder) CreateSecurityGroup(name, description, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockOpenStackClientInterface)(nil).CreateSecurityGroup), name, description, tenantID)
}

// DeleteSecurityGroup mocks base method
func (m *MockOpenStackClientInterface) DeleteSecurityGroup(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup
func (mr *MockOpenStackClientInterfaceMockRecorder) DeleteSecurityGroup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockOpenStackClientInterface)(nil).DeleteSecurityGroup), id)
}

// AddSecurityGroupRule mocks base method
func (m *MockOpenStackClientInterface) AddSecurityGroupRule(opts rules.CreateOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecurityGroupRule", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecurityGroupRule indicates an expected call of AddSecurityGroupRule
func (mr *MockOpenStackClientInterfaceMockRecorder) AddSecurityGroupRule(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecurityGroupRule", reflect.TypeOf((*MockOpenStackClientInterface)(nil).AddSecurityGroupRule), opts)
}

// DeleteSecurityGroupRule mocks base method
func (m *MockOpenStackClientInterface) DeleteSecurityGroupRule(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRule", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroupRule indicates an expected call of DeleteSecurityGroupRule
func (mr *MockOpenStackClientInterfaceMockRecorder) DeleteSecurityGroupRule(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRule", reflect.TypeOf((*MockOpenStackClientInterface)(nil).DeleteSecurityGroupRule), id)
}

// GetSecurityGroup mocks base method
func (m *MockOpenStackClientInterface) GetSecurityGroup(id string) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", id)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup
func (mr *MockOpenStackClientInterfaceMockRecorder) GetSecurityGroup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetSecurityGroup), id)
}

// GetSecurityGroupByName mocks base method
func (m *MockOpenStackClientInterface) GetSecurityGroupByName(name string) (groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupByName", name)
	ret0, _ := ret[0].(groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupByName indicates an expected call of GetSecurityGroupByName
func (mr *MockOpenStackClientInterfaceMockRecorder) GetSecurityGroupByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupByName", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetSecurityGroupByName), name)
}

// GetTenant mocks base method
func (m *MockOpenStackClientInterface) GetTenant(id string) (tenants.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenant", id)
	ret0, _ := ret[0].(tenants.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant
func (mr *MockOpenStackClientInterfaceMockRecorder) GetTenant(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetTenant), id)
}

// GetTenantByName mocks base method
func (m *MockOpenStackClientInterface) GetTenantByName(name string) (projects.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantByName", name)
	ret0, _ := ret[0].(projects.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantByName indicates an expected call of GetTenantByName
func (mr *MockOpenStackClientInterfaceMockRecorder) GetTenantByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantByName", reflect.TypeOf((*MockOpenStackClientInterface)(nil).GetTenantByName), name)
}

// ServerHasSG mocks base method
func (m *MockOpenStackClientInterface) ServerHasSG(id, sgName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerHasSG", id, sgName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerHasSG indicates an expected call of ServerHasSG
func (mr *MockOpenStackClientInterfaceMockRecorder) ServerHasSG(id, sgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerHasSG", reflect.TypeOf((*MockOpenStackClientInterface)(nil).ServerHasSG), id, sgName)
}

// AttachSG mocks base method
func (m *MockOpenStackClientInterface) AttachSG(id, sgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachSG", id, sgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachSG indicates an expected call of AttachSG
func (mr *MockOpenStackClientInterfaceMockRecorder) AttachSG(id, sgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachSG", reflect.TypeOf((*MockOpenStackClientInterface)(nil).AttachSG), id, sgName)
}

// DetachSG mocks base method
func (m *MockOpenStackClientInterface) DetachSG(id, sgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachSG", id, sgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachSG indicates an expected call of DetachSG
func (mr *MockOpenStackClientInterfaceMockRecorder) DetachSG(id, sgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachSG", reflect.TypeOf((*MockOpenStackClientInterface)(nil).DetachSG), id, sgName)
}
